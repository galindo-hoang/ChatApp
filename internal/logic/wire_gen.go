// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package logic

import (
	"github.com/ChatService/internal/configs"
	"github.com/ChatService/internal/dataaccess/cache"
	"github.com/ChatService/internal/dataaccess/database"
)

// Injectors from wire.go:

func initializeToken(filePath configs.ConfigFilePath) (Token, error) {
	config, err := configs.NewConfig(filePath)
	if err != nil {
		return nil, err
	}
	auth := config.Auth
	logicToken, err := NewToken(auth)
	if err != nil {
		return nil, err
	}
	return logicToken, nil
}

func initializeAccount(filePath configs.ConfigFilePath) (Account, func(), error) {
	config, err := configs.NewConfig(filePath)
	if err != nil {
		return nil, nil, err
	}
	configsDatabase := config.Database
	db, cleanup, err := database.InitializeAndMigrateUpDB(configsDatabase)
	if err != nil {
		return nil, nil, err
	}
	gormDB, err := database.InitializeGorm(db, configsDatabase)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	auth := config.Auth
	logicHash := NewHash(auth)
	logicToken, err := NewToken(auth)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	takenAccountEmail := cache.NewTakenAccountEmail()
	accountDataAccessor := database.InitializeAccountDataAccessor(gormDB)
	logicAccount := NewAccount(gormDB, logicHash, logicToken, takenAccountEmail, accountDataAccessor)
	return logicAccount, func() {
		cleanup()
	}, nil
}
